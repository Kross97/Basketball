{"version":3,"sources":["api/apiСonstants/imageRequestError.ts","store/asyncActions/image.ts","api/image.ts","static/icons/add_photo.svg","uiComponents/ImageUpload.tsx","components/UserChange.tsx"],"names":["imageRequestErrors","400","401","500","502","loadNewImage","createAsyncThunk","imageData","a","dispatch","addEntityError","actions","addErrorMessage","errorMessage","url","body","file","token","post","result","imageLoadData","addSrcImageServer","srcImage","isCustomError","status","actionCreators","clearSrcImage","addSrcImageExisting","ImageUpload","React","memo","defaultImage","useSelector","state","authDataUser","authData","useCustomActions","downloadImage","useEffect","InputLoad","onChange","target","files","fileImage","formData","FormData","set","type","accept","ImageContainer","imageSrc","AddHover","styled","input","div","addPhotoIcon","mobileVersionLayout","changeAuthData","avatarUrl","userName","name","errorChangeMessage","shallowEqual","history","useHistory","changeDataUser","useForm","register","handleSubmit","errors","trigger","changeUserData","data","change","payload","push","routePaths","teams","returnForTeamsPage","useCallback","ContainerUserChange","FormChange","onClick","event","stopPropagation","onSubmit","text","disabled","startType","defaultValue","required","pattern","regExpName","minLength","maxLength","isError","userChangeErrors","BtnGroup","isNegativeStyle","isAdding","size","Object","keys","length","NotificationContainer","theme","colors","white","form"],"mappings":"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","file":"static/js/9.d6c87d30.chunk.js","sourcesContent":["interface IErrors {\r\n  [key: number]: string;\r\n}\r\n\r\nexport const imageRequestErrors: IErrors = {\r\n  400: 'Image or format is not correct',\r\n  401: 'You are not logged in, log in',\r\n  500: 'Server error, please try again later',\r\n  502: 'Server error, please try again later',\r\n};\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { saveImage } from '../../api/image';\r\nimport { IImageData } from '../../helpers/interfaces/requestInterfaces/Image';\r\nimport { imageLoadData } from '../reducers/image';\r\nimport { imageRequestErrors } from '../../api/apiСonstants/imageRequestError';\r\nimport { addEntityError } from '../reducers/addingError';\r\n\r\nexport const loadNewImage = createAsyncThunk('imageLoad',\r\n  async (imageData: IImageData, { dispatch }) => {\r\n    dispatch(addEntityError.actions.addErrorMessage({ errorMessage: '' }));\r\n    try {\r\n      const result = await saveImage('Image/SaveImage', imageData.file, imageData.token);\r\n      dispatch(imageLoadData.actions.addSrcImageServer({ srcImage: result }));\r\n    } catch (error) {\r\n      if (error.isCustomError) {\r\n        dispatch(addEntityError.actions.addErrorMessage({\r\n          errorMessage: imageRequestErrors[error.status],\r\n        }));\r\n      }\r\n    }\r\n  });\r\n","import { post } from './index';\r\n\r\nexport const saveImage = (url: string, body: FormData, token: string) => (\r\n  post<object>(url, body, token)\r\n);\r\n","export default __webpack_public_path__ + \"static/media/add_photo.06bd5fc8.svg\";","import React, { FC, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\nimport addPhotoIcon from '../static/icons/add_photo.svg';\r\nimport { mobileVersionLayout } from '../helpers/constants/mobileSize';\r\nimport { useCustomActions } from '../helpers/functions/useCustomActions';\r\nimport { imageLoadData } from '../store/reducers/image';\r\nimport { loadNewImage } from '../store/asyncActions/image';\r\nimport { StoreReducer } from '../helpers/interfaces/StoreReducer';\r\n\r\ninterface IProps {\r\n  defaultImage?: string | undefined;\r\n}\r\n\r\nconst actionCreators = {\r\n  loadNewImage,\r\n  clearSrcImage: imageLoadData.actions.clearSrcImage,\r\n  addSrcImageExisting: imageLoadData.actions.addSrcImageExisting,\r\n};\r\n\r\nexport const ImageUpload: FC<IProps> = React.memo(({\r\n  defaultImage,\r\n}) => {\r\n  const { token, srcImage } = useSelector((state: StoreReducer) => ({\r\n    token: state.authDataUser.authData.token,\r\n    srcImage: state.imageLoadData.srcImage,\r\n  }));\r\n\r\n  const {\r\n    clearSrcImage,\r\n    loadNewImage: downloadImage,\r\n    addSrcImageExisting,\r\n  } = useCustomActions(actionCreators);\r\n\r\n  useEffect(() => {\r\n    clearSrcImage();\r\n    if (defaultImage) {\r\n      addSrcImageExisting({ srcImage: defaultImage });\r\n    }\r\n  }, [defaultImage]);\r\n\r\n  const loadImage = (imageData: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (imageData.target.files) {\r\n      const fileImage = imageData.target.files[0];\r\n      const formData = new FormData();\r\n      formData.set('file', fileImage);\r\n      downloadImage({ file: formData, token });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <label>\r\n      <InputLoad onChange={loadImage} type=\"file\" accept=\"image/png, image/jpeg, image/jpg\" />\r\n      <ImageContainer imageSrc={srcImage}>\r\n        <AddHover />\r\n      </ImageContainer>\r\n    </label>\r\n  );\r\n});\r\n\r\nconst InputLoad = styled.input`\r\n  display: none;\r\n`;\r\n\r\nconst AddHover = styled.div`\r\n  border-radius: 10px;\r\n  display: block;\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background: rgba(156, 156, 156, 0.5) url(${addPhotoIcon}) no-repeat center center;\r\n  background-size: 74px 75px;\r\n  transition: 1s ease;\r\n\r\n  &:hover {\r\n    background-color: rgba(48, 48, 48, 0.8);\r\n  }\r\n\r\n  @media (max-width: ${mobileVersionLayout}) {\r\n    background-size: 41px 40px;\r\n  }\r\n`;\r\n\r\nconst ImageContainer = styled.div<{ imageSrc: string; }>`\r\n  border-radius: 10px;\r\n  cursor: pointer;\r\n  width: 336px;\r\n  height: 261px;\r\n  position: relative;\r\n  background: ${({ imageSrc }) => `url(${imageSrc}) no-repeat center 6px`};\r\n  background-size: contain;\r\n\r\n  @media (max-width: ${mobileVersionLayout}) {\r\n    width: 185px;\r\n    height: 144px;\r\n  }\r\n`;\r\n","import React, { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector, shallowEqual } from 'react-redux';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { ImageUpload } from '../uiComponents/ImageUpload';\r\nimport { FieldInputData } from '../uiComponents/FieldInputData';\r\nimport { ButtonAction } from '../uiComponents/ButtonAction';\r\nimport { StoreReducer } from '../helpers/interfaces/StoreReducer';\r\nimport { changeAuthData } from '../store/asyncActions/auth';\r\nimport { useCustomActions } from '../helpers/functions/useCustomActions';\r\nimport { mobileVersionLayout } from '../helpers/constants/mobileSize';\r\nimport { NotificationMessage } from '../uiComponents/NotificationMessage';\r\nimport { IDataChangeUser } from '../helpers/interfaces/componentsInterfaces/StateAndEvents';\r\nimport { regExpName } from '../helpers/constants/regularExp';\r\nimport { routePaths } from '../helpers/constants/routePaths';\r\nimport { userChangeErrors } from '../helpers/constants/formErrors';\r\n\r\nconst actionCreators = {\r\n  changeAuthData,\r\n};\r\n\r\nexport default () => {\r\n  const {\r\n    avatarUrl,\r\n    token,\r\n    srcImage,\r\n    errorMessage,\r\n    userName,\r\n  } = useSelector((state: StoreReducer) => (\r\n    {\r\n      srcImage: state.imageLoadData.srcImage,\r\n      token: state.authDataUser.authData.token,\r\n      avatarUrl: state.authDataUser.authData.avatarUrl,\r\n      userName: state.authDataUser.authData.name,\r\n      errorMessage: state.authDataUser.errorChangeMessage,\r\n    }\r\n  ), shallowEqual);\r\n\r\n  const history = useHistory();\r\n\r\n  const {\r\n    changeAuthData: changeDataUser,\r\n  } = useCustomActions(actionCreators);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    errors,\r\n    trigger,\r\n  } = useForm();\r\n\r\n  const changeUserData = async (data: IDataChangeUser) => {\r\n    const { payload: isSuccessChanged } = await changeDataUser({\r\n      change: {\r\n        userName: data.userName,\r\n        avatarUrl: srcImage,\r\n      },\r\n      token,\r\n    });\r\n    if (isSuccessChanged) {\r\n      history.push(routePaths.teams);\r\n    }\r\n  };\r\n\r\n  const returnForTeamsPage = useCallback(() => {\r\n    history.push(routePaths.teams);\r\n  }, []);\r\n\r\n  const stopSurfacing = (event: React.MouseEvent<HTMLFormElement>) => {\r\n    event.stopPropagation();\r\n  };\r\n  return (\r\n    <ContainerUserChange>\r\n      <ImageUpload defaultImage={avatarUrl} />\r\n      <FormChange onClick={stopSurfacing} onSubmit={handleSubmit(changeUserData)}>\r\n        <FieldInputData\r\n          text=\"Name\"\r\n          disabled={false}\r\n          startType=\"text\"\r\n          type=\"text\"\r\n          name=\"userName\"\r\n          defaultValue={userName}\r\n          onChange={() => trigger('userName')}\r\n          register={register({\r\n            required: true,\r\n            pattern: regExpName,\r\n            minLength: 3,\r\n            maxLength: 27,\r\n          })}\r\n          isError={!!errors.userName}\r\n          errorMessage={userChangeErrors[errors.userName?.type]}\r\n        />\r\n        <BtnGroup>\r\n          <ButtonAction\r\n            isNegativeStyle\r\n            isAdding={false}\r\n            size=\"middle\"\r\n            text=\"Cancel\"\r\n            disabled={false}\r\n            type=\"button\"\r\n            onClick={returnForTeamsPage}\r\n          />\r\n          <ButtonAction\r\n            isNegativeStyle={false}\r\n            isAdding={false}\r\n            size=\"middle\"\r\n            text=\"Change\"\r\n            disabled={Object.keys(errors).length > 0}\r\n            type=\"submit\"\r\n          />\r\n        </BtnGroup>\r\n        {errorMessage !== ''\r\n                && (\r\n                <NotificationContainer>\r\n                  <NotificationMessage text={errorMessage} />\r\n                </NotificationContainer>\r\n                )}\r\n      </FormChange>\r\n    </ContainerUserChange>\r\n  );\r\n};\r\n\r\nconst ContainerUserChange = styled.div`\r\n  display: flex;\r\n  margin: auto;\r\n  padding: 15px;\r\n  background-color: ${({ theme }) => theme.colors.white};\r\n  border-radius: 10px;\r\n\r\n  @media (max-width: ${mobileVersionLayout}) {\r\n    flex-direction: column;\r\n\r\n    & > label {\r\n      margin-bottom: 25px;\r\n      align-self: center;\r\n    }\r\n  }\r\n\r\n  @media (max-width: 475px) {\r\n    flex-grow: 1;\r\n    margin: auto 0;\r\n  }\r\n`;\r\n\r\nconst FormChange = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  padding: 0 20px;\r\n  background-color: ${({ theme }) => theme.colors.white};\r\n\r\n  & > label {\r\n    margin-bottom: 45px;\r\n  }\r\n`;\r\n\r\nconst BtnGroup = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n\r\n  & > button:nth-child(1) {\r\n    margin-right: 20px;\r\n  }\r\n\r\n  @media (max-width: 475px) {\r\n    flex-direction: column;\r\n\r\n    & > button:nth-child(1) {\r\n      margin-right: 0;\r\n      margin-bottom: 20px;\r\n    }\r\n  }\r\n\r\n`;\r\n\r\nconst NotificationContainer = styled.div`\r\n  position: fixed;\r\n  top: 80px;\r\n  right: 36px;\r\n  width: 470px;\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  @media (max-width: ${mobileVersionLayout}) {\r\n    width: auto;\r\n    top: 60px;\r\n    right: 20%;\r\n    left: 20%;\r\n  }\r\n`;\r\n"],"sourceRoot":""}